// Generated by LiveScript 1.6.0
var fs, path, fsExtra, pug, aux, srcbuild;
fs = require('fs');
path = require('path');
fsExtra = require('fs-extra');
pug = require('pug');
aux = require('./aux');
srcbuild = function(opt){
  var that;
  opt == null && (opt = {});
  this.opt = opt;
  this.base = opt.base || '.';
  this.log = opt.logger || aux.logger;
  this.dependencies = {};
  if (that = opt.getDependencies) {
    this.getDependencies = that;
  }
  if (that = opt.isSupported) {
    this.isSupported = that;
  }
  if (that = opt.build) {
    this.build = that;
  }
  return this;
};
srcbuild.prototype = import$(Object.create(Object.prototype), {
  getDependencies: function(){
    return [];
  },
  isSupported: function(file){
    return false;
  },
  unlink: function(){},
  build: function(files){},
  logDependencies: function(file){
    var list, e, this$ = this;
    try {
      list = (this.getDependencies(file) || []).map(path.normalize);
    } catch (e$) {
      e = e$;
      list = [];
    }
    return list.map(function(f){
      var set, that;
      set = (that = this$.dependencies[f])
        ? that
        : this$.dependencies[f] = new Set();
      return set.add(file);
    });
  },
  change: function(file){
    var files, mtime;
    files = [];
    if (!fs.existsSync(file)) {
      return;
    }
    mtime = +fs.statSync(file).mtime;
    if (this.isSupported(file)) {
      files.push({
        file: file,
        mtime: mtime
      });
      this.logDependencies(file);
    }
    if (this.dependencies[file]) {
      files = files.concat(Array.from(this.dependencies[file]).map(function(it){
        return {
          file: it,
          mtime: mtime
        };
      }));
    }
    return this.build(files);
  },
  init: function(){
    var recurse, this$ = this;
    recurse = function(root){
      var files, i$, len$, file, results$ = [];
      if (!fs.existsSync(root)) {
        return;
      }
      files = fs.readdirSync(root).map(function(it){
        return path.normalize(root + "/" + it);
      });
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        file = files[i$];
        if (fs.statSync(file).isDirectory()) {
          recurse(file);
        }
        if (this$.isSupported(file)) {
          results$.push(this$.logDependencies(file));
        }
      }
      return results$;
    };
    return recurse(this.base);
  }
});
module.exports = srcbuild;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}