// Generated by LiveScript 1.6.0
var fs, path, fsExtra, chokidar, aux, srcwatch;
fs = require('fs');
path = require('path');
fsExtra = require('fs-extra');
chokidar = require('chokidar');
aux = require('./aux');
srcwatch = function(opt){
  opt == null && (opt = {});
  this.opt = opt;
  this.builders = opt.builders;
  this.chokidarCfg = {
    persistent: true,
    ignored: [],
    ignoreInitial: true
  };
  this.log = opt.logger || aux.logger;
  this.init();
  return this;
};
srcwatch.prototype = import$(Object.create(Object.prototype), {
  init: function(){
    var this$ = this;
    this.watcher = chokidar.watch(['.'], this.chokidarCfg).on('add', function(it){
      return this$.add(path.normalize(it));
    }).on('change', function(it){
      return this$.change(path.normalize(it));
    }).on('unlink', function(it){
      return this$.unlink(path.normalize(it));
    });
    return this.log.info("watching src for file change");
  },
  add: function(file){
    return this.builders.map(function(it){
      return it.change(file);
    });
  },
  change: function(file){
    return this.builders.map(function(it){
      return it.change(file);
    });
  },
  unlink: function(file){
    return this.builders.map(function(it){
      return it.unlink(file);
    });
  }
});
module.exports = srcwatch;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}